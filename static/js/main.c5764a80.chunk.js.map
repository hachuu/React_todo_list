{"version":3,"sources":["components/TodoList/TodoListTemplate.js","components/Form/Form.js","components/TodoItem/TodoItem.js","components/TodoItemList/TodoItemList.js","components/Palette/Palette.js","App.js","reportWebVitals.js","index.js"],"names":["TodoListTemplate","form","palette","children","today","Date","year","getFullYear","month","getMonth","day","getDate","todate","className","Form","value","color","onChange","onCreate","onKeyPress","useEffect","console","log","style","onClick","TodoItem","nextProps","nextState","this","props","checked","text","id","onToggle","onRemove","e","stopPropagation","Component","TodoItemList","todos","todoList","map","Color","active","background","Palette","colors","selected","onSelect","colorList","App","state","input","handleChange","setState","target","handleCreate","concat","alert","handleKeyPress","key","handleToggle","index","findIndex","todo","nextTodos","handleRemove","filter","handleSelectColor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","react_Stric","StrictMode","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.c5764a80.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoListTemplate.css';\n\nconst TodoListTemplate = ({form, palette, children}) => {\n\n  const today = new Date();\n  const year = today.getFullYear();\n  const month = (1 + today.getMonth() >= 10 ? 1 + today.getMonth() : `0${1 + today.getMonth()}`);\n  const day = today.getDate() >= 10 ? today.getDate() : `0${today.getDate()}`;\n  const todate = `${year}/${month}/${day}`;\n\n  return (\n    <main className=\"todo-list-template\">\n      <div className=\"title\">\n        {todate} To do List\n      </div>\n      <section className=\"palette-wrapper\">\n        {palette}\n      </section>\n      <section className=\"form-wrapper\">\n        {form}\n      </section>\n      <section className=\"todos-wrapper\">\n        { children }\n      </section>\n    </main>\n  );\n};\n\nexport default TodoListTemplate;","import React, { useEffect } from 'react';\nimport './Form.css';\n\nconst Form = ({value, color, onChange, onCreate, onKeyPress}) => {\n\n  useEffect(() => {\n    console.log('value 값이 설정됨');\n    console.log(value);\n    console.log(color);\n    return () => {\n      console.log('value 가 바뀌기 전..');\n      console.log(value);\n      console.log(color);\n    };\n  });\n  // 리액트 컴포넌트는 기본적으로 부모 컴포넌트가 리렌더링되면 바뀐사항이 없더라도 자식 컴포넌트 또한 리렌더링이 된다.\n  \n  return (\n    <div className=\"form\">\n      <input value={value} onChange={onChange} onKeyPress={onKeyPress} style={{color}}/>\n      <div className=\"create-button\" onClick={onCreate}>\n        추가\n      </div>\n    </div>\n  );\n};\n\nexport default Form;","import React, { Component } from 'react';\nimport './TodoItem.css';\n\nclass TodoItem extends Component {\n  shouldComponentUpdate(nextProps, nextState) {\n    return this.props.checked !== nextProps.checked;\n  }\n\n  render() {\n    const { text, checked, id, color, onToggle, onRemove } = this.props;\n\n    return (\n      <div className=\"todo-item\" onClick={() => onToggle(id)}>\n        <div className=\"remove\" onClick={(e) => {\n          e.stopPropagation(); // onToggle 이 실행되지 않도록 함\n          onRemove(id)}\n        }>&times;</div>\n        <div style={{ color }} className={`todo-text ${checked && 'checked'}`}>\n          <div>{text}</div>\n        </div>\n        {\n          checked && (<div className=\"check-mark\">&#x2713;</div>)\n        }\n      </div>\n    );\n  }\n}\n\nexport default TodoItem;","import React, { Component } from 'react';\nimport TodoItem from './../TodoItem/TodoItem';\n\nclass TodoItemList extends Component {\n  \n  shouldComponentUpdate(nextProps, nextState) {\n    return this.props.todos !== nextProps.todos;\n  }\n\n  render() {\n    const { todos, onToggle, onRemove } = this.props;\n\n    const todoList = todos.map(\n      ({id, text, checked, color}) => (\n        <TodoItem\n          id={id}\n          text={text}\n          checked={checked}\n          color={color}\n          onToggle={onToggle}\n          onRemove={onRemove}\n          key={id}\n        />\n      )\n    );\n\n    return (\n      <div>\n        {todoList}    \n      </div>\n    );\n  }\n}\n\nexport default TodoItemList;","import React, { Component } from 'react';\nimport './Palette.css';\n\nconst Color = ({ color, active, onClick }) => {\n    return (\n        <div className={`color ${active && 'active'}`} style={{ background: color}} onClick={onClick}>\n        \n        </div>\n    )\n}\n\nconst Palette = ({colors, selected, onSelect}) => {\n    const colorList = colors.map(\n      (color) => (<Color color={color} active={selected===color} onClick={() => onSelect(color)} key={color}/>)\n    );\n    return (\n      <div className=\"palette\">\n        {colorList}\n      </div>\n    );\n};\n\nexport default Palette;","import React, { Component } from 'react';\nimport TodoListTemplate from './components/TodoList/TodoListTemplate';\nimport Form from './components/Form/Form';\nimport TodoItemList from './components/TodoItemList/TodoItemList';\nimport Palette from './components/Palette/Palette';\n\nconst colors = ['#343a40', '#f03e3e', '#12b886', '#228ae6'];\n\nclass App extends Component {\n  \n  state = {\n    input: '',\n    todos: [\n      { id: 0, text: '메일 확인', checked: false },\n      { id: 1, text: '소스 git pull, git check', checked: false },\n      { id: 2, text: '소스 리팩토링/공부', checked: false },\n      { id: 3, text: 'react admin ', checked: false }\n    ],\n  }\n  id = 4;\n  \n  handleChange = (e) => {\n    this.setState({\n      input: e.target.value // input 의 다음 바뀔 값\n    });\n  }\n\n  \n  /* \n  배열에 항목 추가하는방법\n  1. spread  연산자 [...];\n  2. concat\n  */\n  handleCreate = () => {\n    const { input, todos, color } = this.state;\n    if (!!input) {\n      this.setState({\n        input: '', // 인풋 비우고\n        // concat 을 사용하여 배열에 추가\n        todos: todos.concat({\n          id: this.id++,\n          text: input,\n          checked: false,\n          color\n        })\n      });\n    } else {\n      alert('input에 입력값을 넣어주세요');\n    }\n  }\n\n  handleKeyPress = (e) => {\n    // 눌려진 키가 Enter 면 handleCreate 호출\n    if(e.key === 'Enter') {\n      this.handleCreate();\n    }\n  }\n\n  handleToggle = (id) => {\n    const { todos } = this.state;\n\n    // 파라미터로 받은 id 를 가지고 몇번째 아이템인지 찾습니다.\n    const index = todos.findIndex(todo => todo.id === id);\n    const selected = todos[index]; // 선택한 객체\n\n    const nextTodos = [...todos]; // 배열을 복사\n\n    // 기존의 값들을 복사하고, checked 값을 덮어쓰기\n    nextTodos[index] = { \n      ...selected, \n      checked: !selected.checked\n    };\n\n    this.setState({\n      todos: nextTodos\n    });\n  }\n\n  handleRemove = (id) => {\n    const { todos } = this.state;\n    this.setState({\n      todos: todos.filter(todo => todo.id !== id)\n    });\n  }\n\n  handleSelectColor = (color) => {\n    this.setState({\n      color\n    })\n  }\n\n  render() {\n    const { input, todos, color } = this.state;\n    const {\n      handleChange,\n      handleCreate,\n      handleKeyPress,\n      handleToggle,\n      handleRemove,\n      handleSelectColor\n    } = this;\n\n    return (\n      <TodoListTemplate form={(\n        <Form \n          value={input}\n          color={color}\n          onKeyPress={handleKeyPress}\n          onChange={handleChange}\n          onCreate={handleCreate}\n        />\n      )}\n        palette={(\n          <Palette colors={colors} selected={color} onSelect={handleSelectColor}/>\n        )}>\n        <TodoItemList todos={todos} onToggle={handleToggle} onRemove={handleRemove}/>\n      </TodoListTemplate>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst react_Stric = (\n  <React.StrictMode>\n  <App />\n  </React.StrictMode>\n)\nconst rootElement = document.getElementById('root');\n// we render the JSX element using the ReactDOM package\nReactDOM.render(react_Stric,rootElement);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}